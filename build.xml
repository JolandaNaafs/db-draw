<?xml version="1.0" encoding="UTF-8" ?>

<project name="DB draw" default="help" phingVersion="3">

  <property name="dc.project-name" value="db-draw"/>
  <property name="db.host" value="mysql"/>

  <target name="setup" depends="composer:install,dc:up,db:remote-update,dc:ip"/>
  <target name="qa" depends="composer:validate,composer:normalize,cs:fix,phpstan:analyze,phpunit:run"/>

  <target name="dc:up" description="Launch containers">
    <exec executable="docker-compose" passthru="true" checkreturn="true">
      <arg line="--project-name ${dc.project-name}"/>
      <arg value="up"/>
      <arg value="--detach"/>
      <arg value="--remove-orphans"/>
    </exec>
  </target>

  <target name="dc:stop" description="Stop docker containers">
    <exec executable="docker-compose" passthru="true">
      <arg line="--project-name ${dc.project-name}"/>
      <arg value="stop"/>
    </exec>
  </target>

  <target name="dc:down" description="Take down containers, networks, images, and volumes">
    <exec executable="docker-compose" passthru="true">
      <arg line="--project-name ${dc.project-name}"/>
      <arg value="down"/>
      <arg value="--volumes"/>
      <arg value="--remove-orphans"/>
      <arg value="--rmi=local"/>
    </exec>
  </target>

  <target name="db:remote-update" description="Update database schema on docker container">
    <exec executable="docker" passthru="true" checkreturn="true">
      <arg value="exec"/>
      <arg value="${dc.project-name}_php_1"/>
      <arg line="phing db:update"/>
      <arg line="-logger \\Phing\\Listener\\AnsiColorLogger"/>
      <arg line="-longtargets"/>
    </exec>
  </target>

  <target name="db:update" description="Update database schema" depends="db:wait-for-database">
    <copy file="config/doctrine-url.php.dist" tofile="config/doctrine-url.php" overwrite="true">
      <filterchain>
        <replacetokens>
          <token key="DB_HOST" value="${db.host}"/>
        </replacetokens>
      </filterchain>
    </copy>
    <exec executable="vendor/bin/doctrine" passthru="true" checkreturn="true">
      <arg value="orm:schema-tool:update"/>
      <arg value="--force"/>
      <arg value="--dump-sql"/>
      <arg value="--complete"/>
      <arg value="--ansi"/>
    </exec>
  </target>

  <target name="dc:ip" description="Reveal containers ip addresses">
    <property name="dc.format"
              value="--format='{{ .Name }}{{&quot;\t&quot;}}{{range .NetworkSettings.Networks}}{{.IPAddress}}{{&quot;\t&quot;}}{{end}}'"/>
    <exec executable="docker" checkreturn="true" passthru="true">
      <arg value="inspect"/>
      <arg line="${dc.format}"/>
      <arg value="${dc.project-name}_php_1"/>
      <arg value="${dc.project-name}_mysql_1"/>
    </exec>
  </target>

  <target name="dc:shell" description="Tunnel to container">
    <exec executable="docker" passthru="true">
      <arg value="exec"/>
      <arg value="-it"/>
      <arg value="${dc.project-name}_php_1"/>
      <arg value="/bin/bash"/>
    </exec>
  </target>

  <target name="qa:remote" description="Run tests on docker container">
    <exec executable="docker" passthru="true" checkreturn="true">
      <arg value="exec"/>
      <arg value="${dc.project-name}_php_1"/>
      <arg line="phing qa"/>
    </exec>
  </target>

  <target name="phpstan:analyze" description="Analyze code at max level">
    <exec executable="vendor/bin/phpstan" passthru="true" checkreturn="true">
      <arg value="--ansi"/>
      <arg value="--no-interaction"/>
      <arg value="--level=max"/>
      <arg value="analyze"/>
      <arg value="--no-progress"/>
      <arg path="src"/>
    </exec>
    <exec executable="vendor/bin/phpstan" passthru="true" checkreturn="true">
      <arg value="clear-result-cache"/>
    </exec>
  </target>

  <target name="composer:validate" description="Validate composer.json">
    <composer command="validate">
      <arg value="--ansi"/>
    </composer>
  </target>

  <target name="composer:normalize" description="Normalize composer.json">
    <composer command="normalize">
      <arg value="--ansi"/>
    </composer>
  </target>

  <target name="composer:install" description="Install Composer dependencies">
    <composer command="install">
      <arg value="--no-interaction"/>
      <arg value="--prefer-dist"/>
      <arg value="--no-progress"/>
      <arg value="--ansi"/>
    </composer>
  </target>

  <target name="docs:images" description="Convert puml to png">
    <visualizer destination="docs/images" format="puml"/>
    <exec executable="plantuml" checkreturn="true" passthru="true">
      <arg value="-tpng"/>
      <arg value="-nometadata"/>
      <arg file="docs/images/build.puml"/>
    </exec>
  </target>

  <target name="phpunit:run" description="Run PHPUnit tests" depends="db:update">
    <exec executable="vendor/bin/phpunit" passthru="true" checkreturn="true">
      <env key="DB_HOST" value="${db.host}"/>
      <arg line="--colors=always"/>
    </exec>
  </target>

  <target name="db:wait-for-database" description="Wait until DB is up and running">
    <waitfor timeoutproperty="db.timeout" maxwait="30" maxwaitunit="second">
      <pdosqlexec url="mysql:host=${db.host};dbname=db-draw;port=3306"
                  userid="root" password="groot"/>
    </waitfor>
    <fail if="db.timeout">Cannot reach database.</fail>
  </target>

  <target name="help">
    <visualizer format="png" destination="docs/images"/>
    <exec executable="xdg-open" spawn="true">
      <arg file="docs/images/build.png"/>
    </exec>
  </target>

  <target name="cs:fix" description="Fix code style">
    <exec executable="vendor/bin/php-cs-fixer" passthru="true" checkreturn="true">
      <arg value="fix"/>
    </exec>
  </target>
</project>
